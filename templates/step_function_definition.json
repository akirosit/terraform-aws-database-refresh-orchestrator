{
  "Comment": "Database Refresh Orchestrator for Amazon RDS and Amazon Aurora",
  "StartAt": "defaults-values",
  "States": {
    "defaults-values": {
      "Type": "Pass",
      "Next": "compute-values",
      "ResultPath": "$.defaultValues",
      "Parameters": {
        "YYYY.$": "States.ArrayGetItem(States.StringSplit(States.ArrayGetItem(States.StringSplit($$.Execution.StartTime, 'T'), 0), '-'), 0)",
        "MM.$": "States.ArrayGetItem(States.StringSplit(States.ArrayGetItem(States.StringSplit($$.Execution.StartTime, 'T'),0), '-'), 1)",
        "DD.$": "States.ArrayGetItem(States.StringSplit(States.ArrayGetItem(States.StringSplit($$.Execution.StartTime, 'T'),0), '-'), 2)",
        "Tags": {
          "refresh": "true",
          "refresh-cluster.$": "$.SourceDBClusterIdentifier"
        }
      }
    },
    "compute-values": {
      "Type": "Pass",
      "Next": "RESTORE-CLUSTER",
      "ResultPath": "$.computeValues",
      "Parameters": {
        "Date.$": "States.Format('{}{}{}',$.defaultValues.YYYY,$.defaultValues.MM, $.defaultValues.DD)",
        "Tags.$": "States.JsonMerge($.defaultValues.Tags, $.Tags, false)"
      }
    },
    "RESTORE-CLUSTER": {
      "Comment": "Restore steps",
      "Type": "Pass",
      "Next": "choice-restore-type"
    },
    "choice-restore-type": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RestoreType",
          "StringEquals": "from-snapshot",
          "Next": "get-db-cluster-snapshot-infos"
        },
        {
          "Variable": "$.RestoreType",
          "StringEquals": "fast-clone",
          "Next": "perform-restore"
        }
      ],
      "Default": "wait-restore"
    },
    "get-db-cluster-snapshot-infos": {
      "Type": "Task",
      "Parameters": {
        "DbClusterIdentifier.$": "$.SourceDBClusterIdentifier"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusterSnapshots",
      "Next": "choice-std-or-serverless",
      "ResultSelector": {
        "DBClusterSnapshotIdentifier.$": "$.DbClusterSnapshots[4].DbClusterSnapshotIdentifier",
        "DBClusterSnapshotArn.$": "$.DbClusterSnapshots[4].DbClusterSnapshotArn",
        "SnapshotCreateTime.$": "$.DbClusterSnapshots[4].SnapshotCreateTime",
        "EngineVersion.$": "$.DbClusterSnapshots[4].EngineVersion"
      },
      "ResultPath": "$.result-get-db-cluster-snapshot-infos"
    },
    "choice-std-or-serverless": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DbInstanceClass",
          "StringEquals": "db.serverless",
          "Next": "perform-restore-from-snapshot-serverless"
        }
      ],
      "Default": "perform-restore-from-snapshot"
    },
    "perform-restore-from-snapshot": {
      "Type": "Task",
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "Engine": "aurora-mysql",
        "DbClusterInstanceClass.$": "$.DbInstanceClass",
        "EngineVersion.$": "$.result-get-db-cluster-snapshot-infos.EngineVersion",
        "SnapshotIdentifier.$": "$.result-get-db-cluster-snapshot-infos.DBClusterSnapshotIdentifier",
        "DbSubnetGroupName.$": "$.DbSubnetGroupName",
        "DbClusterParameterGroupName.$": "$.DbClusterParameterGroupName",
        "CopyTagsToSnapshot": true,
        "EnableIAMDatabaseAuthentication": "False",
        "EnableCloudwatchLogsExports": [
          "audit",
          "error",
          "general",
          "slowquery"
        ],
        "DeletionProtection": false,
        "VpcSecurityGroupIds.$": "$.VpcSecurityGroupIds"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:restoreDBClusterFromSnapshot",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.restore-result",
      "Next": "wait-restore",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.restore.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "perform-restore-from-snapshot-serverless": {
      "Type": "Task",
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "Engine": "aurora-mysql",
        "DbClusterInstanceClass.$": "$.DbInstanceClass",
        "ServerlessV2ScalingConfiguration": {
          "MinCapacity": 1,
          "MaxCapacity": 2
        },
        "EngineVersion.$": "$.result-get-db-cluster-snapshot-infos.EngineVersion",
        "SnapshotIdentifier.$": "$.result-get-db-cluster-snapshot-infos.DBClusterSnapshotIdentifier",
        "DbSubnetGroupName.$": "$.DbSubnetGroupName",
        "DbClusterParameterGroupName.$": "$.DbClusterParameterGroupName",
        "CopyTagsToSnapshot": true,
        "EnableIAMDatabaseAuthentication": "False",
        "EnableCloudwatchLogsExports": [
          "audit",
          "error",
          "general",
          "slowquery"
        ],
        "DeletionProtection": false,
        "VpcSecurityGroupIds.$": "$.VpcSecurityGroupIds"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:restoreDBClusterFromSnapshot",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.restore-result",
      "Next": "wait-restore",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.restore.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "perform-restore": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:restoreDBClusterToPointInTime",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "SourceDBClusterIdentifier.$": "$.SourceDBClusterIdentifier",
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "RestoreType": "full-copy",
        "UseLatestRestorableTime": true,
        "Port": 3306,
        "DbSubnetGroupName.$": "$.DbSubnetGroupName",
        "EnableIAMDatabaseAuthentication": "False",
        "KmsKeyId.$": "$.KmsKeyId",
        "EnableCloudwatchLogsExports": [
          "audit",
          "error",
          "general",
          "slowquery"
        ],
        "CopyTagsToSnapshot": true,
        "DbClusterParameterGroupName.$": "$.DbClusterParameterGroupName",
        "DeletionProtection": false,
        "VpcSecurityGroupIds.$": "$.VpcSecurityGroupIds"
      },
      "ResultPath": "$.restore-result",
      "Next": "wait-restore",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.restore.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-restore": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-restore"
    },
    "check-status-restore": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier"
      },
      "Next": "outcome-restore",
      "ResultPath": "$.check-status-restore-result",
      "ResultSelector": {
        "DbCluster.$": "States.ArrayGetItem($.DbClusters,0)"
      }
    },
    "outcome-restore": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-restore-result.DbCluster.Status",
          "StringEquals": "available",
          "Next": "tag-restored-cluster"
        }
      ],
      "Default": "wait-restore"
    },
    "tag-restored-cluster": {
      "Type": "Task",
      "Parameters": {
        "ResourceARNList.$": "States.Array($['check-status-restore-result']['DbCluster']['DbClusterArn'])",
        "Tags.$": "$.computeValues.Tags"
      },
      "Resource": "arn:aws:states:::aws-sdk:resourcegroupstaggingapi:tagResources",
      "ResultPath": "$.tag-restored-cluster-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.tag-restored-cluster-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ],
      "Next": "RESTORE-INSTANCE"
    },
    "RESTORE-INSTANCE": {
      "Comment": "Restore steps",
      "Type": "Pass",
      "Next": "choice-restore-type-instance"
    },
    "choice-restore-type-instance": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RestoreType",
          "StringEquals": "from-snapshot",
          "Next": "create-instance"
        },
        {
          "Variable": "$.RestoreType",
          "StringEquals": "fast-clone",
          "Next": "create-instance"
        }
      ],
      "Default": "wait-create-instance"
    },
    "create-instance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:createDBInstance",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "DbInstanceIdentifier.$": "$.TmpDbInstanceIdentifier",
        "DbInstanceClass.$": "$.DbInstanceClass",
        "Engine": "aurora-mysql",
        "DbSubnetGroupName.$": "$.DbSubnetGroupName",
        "DbParameterGroupName.$": "$.DbParameterGroupName",
        "AutoMinorVersionUpgrade": false,
        "PubliclyAccessible": false,
        "CopyTagsToSnapshot": true
      },
      "ResultPath": "$.createinstance-result",
      "Next": "wait-create-instance",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.createinstance.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-create-instance": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-create-instance"
    },
    "check-status-create-instance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Parameters": {
        "DbInstanceIdentifier.$": "$.TmpDbInstanceIdentifier"
      },
      "Next": "outcome-create-instance",
      "ResultPath": "$.check-status-create-instance-result"
    },
    "outcome-create-instance": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-create-instance-result.DbInstances[0].DbInstanceStatus",
          "StringEquals": "available",
          "Next": "tag-restored-instance"
        }
      ],
      "Default": "wait-create-instance"
    },
    "tag-restored-instance": {
      "Type": "Task",
      "Parameters": {
        "ResourceARNList.$": "States.Array($['check-status-create-instance-result']['DbInstances'][0]['DbInstanceArn'])",
        "Tags.$": "$.computeValues.Tags"
      },
      "Resource": "arn:aws:states:::aws-sdk:resourcegroupstaggingapi:tagResources",
      "ResultPath": "$.tag-restored-instance-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.tag-restored-instance-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ],
      "Next": "choice-run-mysqldump-cluster"
    },
    "choice-run-mysqldump-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RunMysqlDumpOldCluster",
          "BooleanEquals": true,
          "Next": "get-old-cluster-endpoint"
        }
      ],
      "Default": "choice-delete-old-cluster"
    },
    "get-old-cluster-endpoint": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "get-old-database-master-user-secret-value",
      "Parameters": {
        "DbClusterIdentifier.$": "$.DbClusterIdentifier"
      },
      "ResultSelector": {
        "Endpoint.$": "$.DbClusters[0].Endpoint"
      },
      "ResultPath": "$.get-old-cluster-endpoint-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.get-old-cluster-endpoint.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "get-old-database-master-user-secret-value": {
      "Type": "Task",
      "Parameters": {
        "SecretId.$": "$.OldMasterUserSecretArn"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "Next": "format-old-master-user-secret-string",
      "ResultPath": "$.get-old-database-master-user-secret-value-result"
    },
    "format-old-master-user-secret-string": {
      "Type": "Pass",
      "Parameters": {
        "SecretString.$": "States.StringToJson($['get-old-database-master-user-secret-value-result']['SecretString'])"
      },
      "Next": "get-cluster-info",
      "ResultPath": "$.format-old-master-user-secret-string"
    },
    "get-cluster-info": {
      "Type": "Task",
      "Next": "map-eks-mysqldump-job",
      "Credentials": {
        "RoleArn.$": "$.EksRoleArn"
      },
      "Parameters": {
        "Name.$": "$.EksClusterName"
      },
      "Resource": "arn:aws:states:::aws-sdk:eks:describeCluster",
      "ResultPath": "$.Eks"
    },
    "map-eks-mysqldump-job": {
      "Type": "Map",
      "ItemsPath": "$.MysqlTables",
      "ItemSelector": {
        "Name.$": "$$.Map.Item.Index",
        "Endpoint.$": "$.get-old-cluster-endpoint-result.Endpoint",
        "Username.$": "$.format-old-master-user-secret-string.SecretString.username",
        "Password.$": "$.format-old-master-user-secret-string.SecretString.password",
        "Database.$": "$$.Map.Item.Value.Database",
        "Table.$": "$$.Map.Item.Value.Table",
        "Namespace.$": "$.EksNamespace",
        "EksNodeSelector.$": "$.EksNodeSelector",
        "EksTolerations.$": "$.EksTolerations",
        "EfsName.$": "$.EfsName",
        "EksRoleArn.$": "$.EksRoleArn",
        "Eks.$": "$.Eks",
        "Date.$": "$.computeValues.Date"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "run-eks-mysqldump-job",
        "States": {
          "run-eks-mysqldump-job": {
            "Type": "Task",
            "Resource": "arn:aws:states:::eks:runJob.sync",
            "Parameters": {
              "ClusterName.$": "$.Eks.Cluster.Name",
              "CertificateAuthority.$": "$.Eks.Cluster.CertificateAuthority.Data",
              "Endpoint.$": "$.Eks.Cluster.Endpoint",
              "Namespace.$": "$.Namespace",
              "Job": {
                "apiVersion": "batch/v1",
                "kind": "Job",
                "metadata": {
                  "name.$": "States.Format('refresh-mysqldump-{}-{}', $.Date, $.Name)",
                  "namespace.$": "$.Namespace"
                },
                "spec": {
                  "template": {
                    "metadata": {
                      "name": "refresh-mysqldump"
                    },
                    "spec": {
                      "serviceAccountName": "refresh",
                      "nodeSelector.$": "$.EksNodeSelector",
                      "tolerations.$": "$.EksTolerations",
                      "volumes": [
                        {
                          "name": "shared-data",
                          "persistentVolumeClaim": {
                            "claimName.$": "$.EfsName"
                          }
                        }
                      ],
                      "containers": [
                        {
                          "name": "mysqldump",
                          "image": "akirosit/mysql-s3:latest",
                          "imagePullPolicy": "Always",
                          "command": [
                            "/dump.sh"
                          ],
                          "volumeMounts": [
                            {
                              "name": "shared-data",
                              "mountPath": "/refresh",
                              "subPath.$": "States.Format('refresh-mysqldump-{}', $.Date)"
                            }
                          ],
                          "env": [
                            {
                              "name": "TZ",
                              "value": "Europe/Paris"
                            },
                            {
                              "name": "MYSQL_HOST",
                              "value.$": "$.Endpoint"
                            },
                            {
                              "name": "MYSQL_USER",
                              "value.$": "$.Username"
                            },
                            {
                              "name": "MYSQL_PASSWORD",
                              "value.$": "$.Password"
                            },
                            {
                              "name": "MYSQL_DATABASE",
                              "value.$": "$.Database"
                            },
                            {
                              "name": "MYSQL_TABLE",
                              "value.$": "$.Table"
                            },
                            {
                              "name": "LOCAL_DIR",
                              "value": "/refresh"
                            }
                          ]
                        }
                      ],
                      "restartPolicy": "Never"
                    }
                  }
                }
              }
            },
            "End": true,
            "Credentials": {
              "RoleArn.$": "$.EksRoleArn"
            }
          }
        }
      },
      "ResultPath": "$.map-eks-mysqldump-job",
      "Next": "choice-run-scripts-old-cluster",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.map-eks-mysqldump-job-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "choice-run-scripts-old-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RunSqlScriptsOldCluster",
          "BooleanEquals": true,
          "Next": "run-sql-scripts-old-cluster"
        }
      ],
      "Default": "choice-delete-old-cluster"
    },
    "run-sql-scripts-old-cluster": {
      "Type": "Map",
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Parameters": {
          "Bucket.$": "$.RefreshBucket",
          "Prefix.$": "States.Format('{}/',$.RefreshBucketPrefixOldCluster)"
        }
      },
      "ItemSelector": {
        "cluster.$": "$.DbClusterIdentifier",
        "dbname.$": "$.OldDatabaseName",
        "secretname.$": "$.OldMasterUserSecretArn",
        "bucketname.$": "$.RefreshBucket",
        "key.$": "$$.Map.Item.Value.Key"
      },
      "MaxConcurrency": 1,
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "lambda-pre-sql-script",
        "States": {
          "lambda-pre-sql-script": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "${awssoldb-RunScriptsMySQL}",
              "Payload": {
                "cluster.$": "$.cluster",
                "dbname.$": "$.dbname",
                "secretname.$": "$.secretname",
                "bucketname.$": "$.bucketname",
                "key.$": "$.key"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Label": "S3Preobjectkeys",
      "ResultPath": "$.run-sql-scripts-old-cluster-result",
      "Next": "choice-delete-old-cluster",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.run-sql-scripts-old-cluster-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "choice-delete-old-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DeleteOldCluster",
          "BooleanEquals": true,
          "Next": "DELETE-OLD-CLUSTER"
        }
      ],
      "Default": "choice-rename-old-cluster"
    },
    "choice-rename-old-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RenameOldCluster",
          "BooleanEquals": true,
          "Next": "RENAME-OLD-CLUSTER"
        }
      ],
      "Default": "POST-RESTORE-SCRIPTS"
    },
    "DELETE-OLD-CLUSTER": {
      "Comment": "Post-restore steps",
      "Type": "Pass",
      "Next": "get-old-database-arn"
    },
    "get-old-database-arn": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Parameters": {
        "DbInstanceIdentifier.$": "$.DbInstanceIdentifier"
      },
      "Next": "check-old-database-tags",
      "ResultSelector": {
        "ResourceName.$": "$.DbInstances[0].DbInstanceArn"
      },
      "ResultPath": "$.get-old-database-arn-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.get-old-database-arn.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "check-old-database-tags": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:listTagsForResource",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "ResourceName.$": "$.get-old-database-arn-result.ResourceName"
      },
      "ResultSelector": {
        "TagRefresh.$": "States.ArrayGetItem($.TagList[?(@.Key=='refresh')].Value,0)"
      },
      "ResultPath": "$.check-old-database-tags-result",
      "Next": "outcome-check-old-database-tags",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-old-database-tags.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "outcome-check-old-database-tags": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-old-database-tags-result.TagRefresh",
          "StringEquals": "true",
          "Next": "delete-old-database"
        }
      ],
      "Default": "update-dynamodb-failure"
    },
    "delete-old-database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:deleteDBInstance",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbInstanceIdentifier.$": "$.DbInstanceIdentifier",
        "SkipFinalSnapshot": true,
        "DeleteAutomatedBackups": false
      },
      "ResultPath": "$.delete-old-database-result",
      "Next": "wait-delete-old-database",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.delete.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-delete-old-database": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-delete-old-database"
    },
    "check-status-delete-old-database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Parameters": {
        "DbInstanceIdentifier.$": "$.DbInstanceIdentifier"
      },
      "Next": "wait-delete-old-database",
      "ResultPath": "$.check-status-delete-old-database-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-delete-old-database.errormsg",
          "Next": "get-old-cluster-arn"
        }
      ]
    },
    "get-old-cluster-arn": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "check-old-cluster-tags",
      "Parameters": {
        "DbClusterIdentifier.$": "$.DbClusterIdentifier"
      },
      "ResultSelector": {
        "ResourceName.$": "$.DbClusters[0].DbClusterArn"
      },
      "ResultPath": "$.get-old-cluster-arn-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.get-old-cluster-arn.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "check-old-cluster-tags": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:listTagsForResource",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "ResourceName.$": "$.get-old-cluster-arn-result.ResourceName"
      },
      "ResultSelector": {
        "TagRefresh.$": "States.ArrayGetItem($.TagList[?(@.Key=='refresh')].Value,0)"
      },
      "ResultPath": "$.check-old-cluster-tags-result",
      "Next": "outcome-check-old-cluster-tags",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-old-cluster-tags.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "outcome-check-old-cluster-tags": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-old-cluster-tags-result.TagRefresh",
          "StringEquals": "true",
          "Next": "delete-old-cluster"
        }
      ],
      "Default": "update-dynamodb-failure"
    },
    "delete-old-cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:deleteDBCluster",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbClusterIdentifier.$": "$.DbClusterIdentifier",
        "SkipFinalSnapshot": true
      },
      "ResultPath": "$.delete-old-cluster-result",
      "Next": "wait-delete-old-cluster",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.delete-old-cluster.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-delete-old-cluster": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-delete-old-cluster"
    },
    "check-status-delete-old-cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "wait-delete-old-cluster",
      "Parameters": {
        "DbClusterIdentifier.$": "$.DbClusterIdentifier"
      },
      "ResultPath": "$.check-status-delete-old-cluster-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-delete-old-cluster.errormsg",
          "Next": "POST-RESTORE-SCRIPTS"
        }
      ]
    },
    "RENAME-OLD-CLUSTER": {
      "Comment": "Post-restore steps",
      "Type": "Pass",
      "Next": "rename-old-cluster"
    },
    "rename-old-cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:modifyDBCluster",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbClusterIdentifier.$": "$.DbClusterIdentifier",
        "NewDBClusterIdentifier.$": "$.OldDbClusterIdentifier",
        "ApplyImmediately": true
      },
      "ResultPath": "$.rename-old-cluster-result",
      "Next": "wait-rename-old-cluster",
      "Retry": [
        {
          "ErrorEquals": [
            "An error occurred (InvalidDBClusterStateFault) when calling the ModifyDBCluster operation: DB cluster is not available for modification with status backing-up"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.rename-old-cluster.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-rename-old-cluster": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-rename-old-cluster"
    },
    "check-status-rename-old-cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "outcome-rename-old-cluster",
      "Parameters": {
        "DbClusterIdentifier.$": "$.OldDbClusterIdentifier"
      },
      "ResultPath": "$.check-status-rename-old-cluster-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-rename-old-cluster-errormsg",
          "Next": "wait-rename-old-cluster"
        }
      ]
    },
    "outcome-rename-old-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-rename-old-cluster-result.DbClusters[0].Status",
          "StringEquals": "available",
          "Next": "rename-old-database"
        }
      ],
      "Default": "wait-rename-old-cluster"
    },
    "rename-old-database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:modifyDBInstance",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbInstanceIdentifier.$": "$.DbInstanceIdentifier",
        "NewDBInstanceIdentifier.$": "$.OldDbInstanceIdentifier",
        "ApplyImmediately": true
      },
      "ResultPath": "$.rename-old-result",
      "Next": "wait-old-rename",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.rename-old.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-old-rename": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-old-rename"
    },
    "check-status-old-rename": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Next": "outcome-old-rename",
      "Parameters": {
        "DbInstanceIdentifier.$": "$.OldDbInstanceIdentifier"
      },
      "ResultPath": "$.check-status-old-rename-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-old-rename-errormsg",
          "Next": "wait-old-rename"
        }
      ]
    },
    "outcome-old-rename": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-old-rename-result.DbInstances[0].DbInstanceStatus",
          "StringEquals": "available",
          "Next": "stop-old-db-cluster"
        }
      ],
      "Default": "wait-old-rename"
    },
    "stop-old-db-cluster": {
      "Type": "Task",
      "Next": "POST-RESTORE-SCRIPTS",
      "Parameters": {
        "DbClusterIdentifier.$": "$.OldDbClusterIdentifier"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:stopDBCluster",
      "ResultPath": "$.stop-old-db-cluster-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.stop-old-db-cluster-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "POST-RESTORE-SCRIPTS": {
      "Comment": "Restore steps",
      "Type": "Pass",
      "Next": "choice-add-role-to-cluster"
    },
    "choice-add-role-to-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RestoreType",
          "StringEquals": "from-snapshot",
          "Next": "add-role-to-cluster"
        },
        {
          "Variable": "$.RestoreType",
          "StringEquals": "fast-clone",
          "Next": "add-role-to-cluster"
        }
      ],
      "Default": "wait-add-role-to-cluster"
    },
    "add-role-to-cluster": {
      "Type": "Task",
      "Next": "add-role-to-cluster-pg",
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "RoleArn.$": "$.RDSRoleArn"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:addRoleToDBCluster",
      "ResultPath": "$.add-role-to-cluster-result",
      "Catch": [
        {
          "ErrorEquals": [
            "Rds.DbClusterRoleAlreadyExistsException"
          ],
          "Next": "add-role-to-cluster-pg"
        },
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.renamecluster.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "add-role-to-cluster-pg": {
      "Type": "Task",
      "Next": "wait-add-role-to-cluster",
      "Parameters": {
        "DbClusterParameterGroupName.$": "$.DbClusterParameterGroupName",
        "Parameters": [
          {
            "ParameterName": "aws_default_s3_role",
            "ParameterValue.$": "$.RDSRoleArn",
            "ApplyMethod": "immediate"
          }
        ]
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:modifyDBClusterParameterGroup",
      "ResultPath": "$.add-role-to-cluster-pg-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.renamecluster.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-add-role-to-cluster": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "check-status-add-role-to-cluster"
    },
    "check-status-add-role-to-cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "outcome-add-role-to-cluster-status",
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier"
      },
      "ResultPath": "$.check-status-add-role-to-cluster-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-add-role-to-cluster-errormsg",
          "Next": "wait-add-role-to-cluster"
        }
      ]
    },
    "outcome-add-role-to-cluster-status": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-add-role-to-cluster-result.DbClusters[0].Status",
          "StringEquals": "available",
          "Next": "outcome-add-role-to-cluster-associated-roles-status"
        }
      ],
      "Default": "wait-add-role-to-cluster"
    },
    "outcome-add-role-to-cluster-associated-roles-status": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-add-role-to-cluster-result.DbClusters[0].AssociatedRoles[0].Status",
          "StringEquals": "ACTIVE",
          "Next": "enable-master-user-secret"
        }
      ],
      "Default": "wait-add-role-to-cluster"
    },
    "enable-master-user-secret": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:modifyDBCluster",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "ManageMasterUserPassword": true,
        "MasterUserSecretKmsKeyId.$": "$.MasterUserSecretKmsKeyId",
        "ApplyImmediately": true
      },
      "ResultPath": "$.enable-master-user-secret-result",
      "Next": "wait-enable-master-user-secret",
      "Retry": [
        {
          "ErrorEquals": [
            "An error occurred (InvalidDBClusterStateFault) when calling the ModifyDBCluster operation: DB cluster is not available for modification with status backing-up"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.renamecluster.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-enable-master-user-secret": {
      "Type": "Wait",
      "Seconds": 300,
      "Next": "check-status-enable-master-user-secret"
    },
    "check-status-enable-master-user-secret": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "outcome-enable-master-user-secret",
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier"
      },
      "ResultPath": "$.check-status-enable-master-user-secret-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-enable-master-user-secret-errormsg",
          "Next": "wait-enable-master-user-secret"
        }
      ]
    },
    "outcome-enable-master-user-secret": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-enable-master-user-secret-result.DbClusters[0].Status",
          "StringEquals": "available",
          "Next": "choice-run-mysqlimport-cluster"
        }
      ],
      "Default": "rotate-database-users-secrets"
    },
    "choice-run-mysqlimport-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RunMysqlImportCluster",
          "BooleanEquals": true,
          "Next": "get-cluster-endpoint"
        }
      ],
      "Default": "choice-run-scripts"
    },
    "get-cluster-endpoint": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "get-database-master-user-secret-value",
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier"
      },
      "ResultSelector": {
        "Endpoint.$": "$.DbClusters[0].Endpoint"
      },
      "ResultPath": "$.get-cluster-endpoint-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.get-cluster-endpoint.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "get-database-master-user-secret-value": {
      "Type": "Task",
      "Parameters": {
        "SecretId.$": "$.enable-master-user-secret-result.DbCluster.MasterUserSecret.SecretArn"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "Next": "format-master-user-secret-string",
      "ResultPath": "$.get-database-master-user-secret-value-result"
    },
    "format-master-user-secret-string": {
      "Type": "Pass",
      "Parameters": {
        "SecretString.$": "States.StringToJson($['get-database-master-user-secret-value-result']['SecretString'])"
      },
      "Next": "get-cluster-info-import",
      "ResultPath": "$.format-master-user-secret-string"
    },
    "get-cluster-info-import": {
      "Type": "Task",
      "Next": "run-eks-mysqlimport-job",
      "Credentials": {
        "RoleArn.$": "$.EksRoleArn"
      },
      "Parameters": {
        "Name.$": "$.EksClusterName"
      },
      "Resource": "arn:aws:states:::aws-sdk:eks:describeCluster",
      "ResultPath": "$.Eks"
    },
    "run-eks-mysqlimport-job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::eks:runJob.sync",
      "Credentials": {
        "RoleArn.$": "$.EksRoleArn"
      },
      "Parameters": {
        "ClusterName.$": "$.Eks.Cluster.Name",
        "CertificateAuthority.$": "$.Eks.Cluster.CertificateAuthority.Data",
        "Endpoint.$": "$.Eks.Cluster.Endpoint",
        "Namespace.$": "$.EksNamespace",
        "Job": {
          "apiVersion": "batch/v1",
          "kind": "Job",
          "metadata": {
            "name.$": "States.Format('refresh-mysqlimport-{}', $.computeValues.Date)",
            "namespace.$": "$.EksNamespace"
          },
          "spec": {
            "template": {
              "metadata": {
                "name": "refresh-mysqlimport"
              },
              "spec": {
                "serviceAccountName": "refresh",
                "nodeSelector.$": "$.EksNodeSelector",
                "tolerations.$": "$.EksTolerations",
                "volumes": [
                  {
                    "name": "shared-data",
                    "persistentVolumeClaim": {
                      "claimName.$": "$.EfsName"
                    }
                  }
                ],
                "containers": [
                  {
                    "name": "mysqlimport",
                    "image": "akirosit/mysql-s3:latest",
                    "imagePullPolicy": "Always",
                    "command": [
                      "/import.sh"
                    ],
                    "volumeMounts": [
                      {
                        "name": "shared-data",
                        "mountPath": "/refresh",
                        "subPath.$": "States.Format('refresh-mysqldump-{}', $.computeValues.Date)"
                      }
                    ],
                    "env": [
                      {
                        "name": "TZ",
                        "value": "Europe/Paris"
                      },
                      {
                        "name": "MYSQL_HOST",
                        "value.$": "$.get-cluster-endpoint-result.Endpoint"
                      },
                      {
                        "name": "MYSQL_USER",
                        "value.$": "$.format-master-user-secret-string.SecretString.username"
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "value.$": "$.format-master-user-secret-string.SecretString.password"
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value.$": "$.DatabaseName"
                      },
                      {
                        "name": "LOCAL_DIR",
                        "value": "/refresh"
                      },
                      {
                        "name": "S3_SYNC",
                        "value": "true"
                      },
                      {
                        "name": "S3_BUCKET",
                        "value.$": "$.RefreshBucket"
                      },
                      {
                        "name": "S3_PREFIX",
                        "value.$": "$.RefreshBucketPrefix"
                      }
                    ]
                  }
                ],
                "restartPolicy": "Never"
              }
            }
          }
        }
      },
      "ResultPath": "$.run-eks-mysqlimport-job",
      "Next": "choice-run-scripts"
    },
    "choice-run-scripts": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RunSqlScripts",
          "BooleanEquals": true,
          "Next": "run-sql-scripts"
        }
      ],
      "Default": "POST-RESTORE-RENAME"
    },
    "run-sql-scripts": {
      "Type": "Map",
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Parameters": {
          "Bucket.$": "$.RefreshBucket",
          "Prefix.$": "States.Format('{}/',$.RefreshBucketPrefix)"
        }
      },
      "ItemSelector": {
        "cluster.$": "$.TmpDbClusterIdentifier",
        "dbname.$": "$.DatabaseName",
        "secretname.$": "$.enable-master-user-secret-result.DbCluster.MasterUserSecret.SecretArn",
        "bucketname.$": "$.RefreshBucket",
        "key.$": "$$.Map.Item.Value.Key"
      },
      "MaxConcurrency": 1,
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "lambda-sql-script",
        "States": {
          "lambda-sql-script": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "${awssoldb-RunScriptsMySQL}",
              "Payload": {
                "cluster.$": "$.cluster",
                "dbname.$": "$.dbname",
                "secretname.$": "$.secretname",
                "bucketname.$": "$.bucketname",
                "key.$": "$.key"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException",
                  "Lambda.Unknown"
                ],
                "IntervalSeconds": 300,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Label": "S3objectkeys",
      "ResultPath": "$.run-sql-scripts-result",
      "Next": "rotate-database-users-secrets",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.run-sql-scripts-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "rotate-database-users-secrets": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RotateDatabaseUsersSecrets",
          "BooleanEquals": true,
          "Next": "map-database-users"
        }
      ],
      "Default": "POST-RESTORE-RENAME"
    },
    "map-database-users": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "get-database-source-user-secret-value",
        "States": {
          "get-database-source-user-secret-value": {
            "Type": "Task",
            "Parameters": {
              "SecretId.$": "$.SourceSecretId"
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
            "Next": "format-secret-string",
            "Catch": [
              {
                "ErrorEquals": [
                  "SecretsManager.ResourceNotFoundException"
                ],
                "ResultPath": "$.get-database-source-user-secret-value-result",
                "Next": "get-database-user-secret-value"
              }
            ],
            "ResultPath": "$.get-database-source-user-secret-value-result"
          },
          "format-secret-string": {
            "Type": "Pass",
            "Parameters": {
              "SecretString.$": "States.StringToJson($['get-database-source-user-secret-value-result']['SecretString'])"
            },
            "Next": "get-database-user-secret-value",
            "ResultPath": "$.format-secret-string"
          },
          "get-database-user-secret-value": {
            "Type": "Task",
            "Parameters": {
              "SecretId.$": "$.SecretId"
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
            "Next": "update-secret",
            "Catch": [
              {
                "ErrorEquals": [
                  "SecretsManager.ResourceNotFoundException"
                ],
                "ResultPath": "$.get-database-user-secret-value-result",
                "Next": "create-secret"
              }
            ],
            "ResultPath": "$.get-database-user-secret-value-result"
          },
          "update-secret": {
            "Type": "Task",
            "Parameters": {
              "SecretId.$": "$.SecretId",
              "ClientRequestToken.$": "States.UUID()",
              "SecretString": {
                "username.$": "$.Username",
                "password.$": "$.format-secret-string.SecretString.password",
                "engine.$": "$.Engine",
                "host.$": "$.Endpoint",
                "port.$": "$.Port",
                "dbname.$": "$.DatabaseName",
                "jdbcUrl.$": "States.Format('jdbc:mysql://{}/{}?{}', $.Endpoint, $.DatabaseName, $.jdbcOptions)",
                "masterarn.$": "$.MasterArn",
                "dbClusterIdentifier.$": "$.DbClusterIdentifier"
              }
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:putSecretValue",
            "Next": "rotate-secret",
            "ResultPath": "$.secret-result"
          },
          "create-secret": {
            "Type": "Task",
            "Parameters": {
              "Name.$": "$.SecretId",
              "ClientRequestToken.$": "States.UUID()",
              "KmsKeyId.$": "$.KmsKeyId",
              "SecretString": {
                "username.$": "$.Username",
                "password.$": "$.format-secret-string.SecretString.password",
                "engine.$": "$.Engine",
                "host.$": "$.Endpoint",
                "port.$": "$.Port",
                "dbname.$": "$.DatabaseName",
                "jdbcUrl.$": "States.Format('jdbc:mysql://{}/{}?{}', $.Endpoint, $.DatabaseName, $.jdbcOptions)",
                "masterarn.$": "$.MasterArn",
                "dbClusterIdentifier.$": "$.DbClusterIdentifier"
              }
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:createSecret",
            "Next": "rotate-secret",
            "ResultPath": "$.secret-result"
          },
          "rotate-secret": {
            "Type": "Task",
            "End": true,
            "Parameters": {
              "SecretId.$": "$.SecretId",
              "RotationLambdaARN.$": "$.RotationLambdaARN",
              "RotateImmediately": true
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:rotateSecret",
            "ResultPath": "$.rotate-secret-result"
          }
        }
      },
      "Next": "POST-RESTORE-RENAME",
      "ItemsPath": "$.DatabaselUsersSecrets",
      "ItemSelector": {
        "SourceSecretId.$": "$$.Map.Item.Value.SourceSecretId",
        "SecretId.$": "$$.Map.Item.Value.SecretId",
        "Username.$": "$$.Map.Item.Value.Username",
        "KmsKeyId.$": "$.MasterUserSecretKmsKeyId",
        "Engine.$": "$.check-status-restore-result.DbCluster.Engine",
        "Endpoint.$": "$.check-status-restore-result.DbCluster.Endpoint",
        "Port.$": "$.check-status-restore-result.DbCluster.Port",
        "DatabaseName.$": "$.DatabaseName",
        "jdbcOptions.$": "$.jdbcOptions",
        "MasterArn.$": "$.enable-master-user-secret-result.DbCluster.MasterUserSecret.SecretArn",
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "RotationLambdaARN.$": "$.RotationLambdaARN"
      },
      "ResultPath": "$.map-database-users-result"
    },
    "POST-RESTORE-RENAME": {
      "Comment": "Restore steps",
      "Type": "Pass",
      "Next": "choice-rename-cluster"
    },
    "choice-rename-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RenameCluster",
          "BooleanEquals": true,
          "Next": "rename-cluster"
        }
      ],
      "Default": "update-dynamodb"
    },
    "rename-cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:modifyDBCluster",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbClusterIdentifier.$": "$.TmpDbClusterIdentifier",
        "NewDBClusterIdentifier.$": "$.DbClusterIdentifier",
        "ApplyImmediately": true
      },
      "ResultPath": "$.rename-cluster-result",
      "Next": "wait-rename-cluster",
      "Retry": [
        {
          "ErrorEquals": [
            "An error occurred (InvalidDBClusterStateFault) when calling the ModifyDBCluster operation: DB cluster is not available for modification with status backing-up"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.renamecluster.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-rename-cluster": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-rename-cluster"
    },
    "check-status-rename-cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusters",
      "Next": "outcome-rename-cluster",
      "Parameters": {
        "DbClusterIdentifier.$": "$.DbClusterIdentifier"
      },
      "ResultPath": "$.check-status-rename-cluster-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-rename-cluster-errormsg",
          "Next": "wait-rename-cluster"
        }
      ]
    },
    "outcome-rename-cluster": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-rename-cluster-result.DbClusters[0].Status",
          "StringEquals": "available",
          "Next": "rename-database"
        }
      ],
      "Default": "wait-rename-cluster"
    },
    "rename-database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:modifyDBInstance",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "DbInstanceIdentifier.$": "$.TmpDbInstanceIdentifier",
        "NewDBInstanceIdentifier.$": "$.DbInstanceIdentifier",
        "ApplyImmediately": true
      },
      "ResultPath": "$.rename-result",
      "Next": "wait-rename",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.rename.errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-rename": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "check-status-rename"
    },
    "check-status-rename": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Next": "outcome-rename",
      "Parameters": {
        "DbInstanceIdentifier.$": "$.DbInstanceIdentifier"
      },
      "ResultPath": "$.check-status-rename-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-status-rename-errormsg",
          "Next": "wait-rename"
        }
      ]
    },
    "outcome-rename": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-status-rename-result.DbInstances[0].DbInstanceStatus",
          "StringEquals": "available",
          "Next": "rotate-database-users-secrets-after-rename"
        }
      ],
      "Default": "wait-rename"
    },
    "rotate-database-users-secrets-after-rename": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RotateDatabaseUsersSecrets",
          "BooleanEquals": true,
          "Next": "map-database-users-after-rename"
        }
      ],
      "Default": "POST-RESTORE-RENAME"
    },
    "map-database-users-after-rename": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "get-database-user-secret-value-after-rename",
        "States": {
          "get-database-user-secret-value-after-rename": {
            "Type": "Task",
            "Parameters": {
              "SecretId.$": "$.SecretId"
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
            "Next": "format-secret-string-after-rename",
            "Catch": [
              {
                "ErrorEquals": [
                  "SecretsManager.ResourceNotFoundException"
                ],
                "ResultPath": "$.get-database-user-secret-value-after-rename-result",
                "Next": "create-secret-after-rename"
              }
            ],
            "ResultPath": "$.get-database-user-secret-value-after-rename-result"
          },
          "format-secret-string-after-rename": {
            "Type": "Pass",
            "Parameters": {
              "SecretString.$": "States.StringToJson($['get-database-user-secret-value-after-rename-result']['SecretString'])"
            },
            "Next": "update-secret-after-rename",
            "ResultPath": "$.format-secret-string-after-rename"
          },
          "update-secret-after-rename": {
            "Type": "Task",
            "Parameters": {
              "SecretId.$": "$.SecretId",
              "ClientRequestToken.$": "States.UUID()",
              "SecretString": {
                "username.$": "$.Username",
                "password.$": "$.format-secret-string-after-rename.SecretString.password",
                "engine.$": "$.Engine",
                "host.$": "$.Endpoint",
                "port.$": "$.Port",
                "dbname.$": "$.DatabaseName",
                "jdbcUrl.$": "States.Format('jdbc:mysql://{}/{}?{}', $.Endpoint, $.DatabaseName, $.jdbcOptions)",
                "masterarn.$": "$.MasterArn",
                "dbClusterIdentifier.$": "$.DbClusterIdentifier"
              }
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:putSecretValue",
            "Next": "rotate-secret-after-rename",
            "ResultPath": "$.secret-result"
          },
          "create-secret-after-rename": {
            "Type": "Task",
            "Parameters": {
              "Name.$": "$.SecretId",
              "ClientRequestToken.$": "States.UUID()",
              "KmsKeyId.$": "$.KmsKeyId",
              "SecretString": {
                "username.$": "$.Username",
                "password.$": "States.UUID()",
                "engine.$": "$.Engine",
                "host.$": "$.Endpoint",
                "port.$": "$.Port",
                "dbname.$": "$.DatabaseName",
                "jdbcUrl.$": "States.Format('jdbc:mysql://{}/{}?{}', $.Endpoint, $.DatabaseName, $.jdbcOptions)",
                "masterarn.$": "$.MasterArn",
                "dbClusterIdentifier.$": "$.DbClusterIdentifier"
              }
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:createSecret",
            "Next": "rotate-secret-after-rename",
            "ResultPath": "$.secret-result"
          },
          "rotate-secret-after-rename": {
            "Type": "Task",
            "End": true,
            "Parameters": {
              "SecretId.$": "$.SecretId",
              "RotationLambdaARN.$": "$.RotationLambdaARN",
              "RotateImmediately": true
            },
            "Resource": "arn:aws:states:::aws-sdk:secretsmanager:rotateSecret",
            "ResultPath": "$.rotate-secret-result"
          }
        }
      },
      "Next": "update-dynamodb",
      "ItemsPath": "$.DatabaselUsersSecrets",
      "ItemSelector": {
        "SecretId.$": "$$.Map.Item.Value.SecretId",
        "Username.$": "$$.Map.Item.Value.Username",
        "KmsKeyId.$": "$.MasterUserSecretKmsKeyId",
        "Engine.$": "$.check-status-rename-cluster-result.DbClusters[0].Engine",
        "Endpoint.$": "$.check-status-rename-cluster-result.DbClusters[0].Endpoint",
        "Port.$": "$.check-status-rename-cluster-result.DbClusters[0].Port",
        "DatabaseName.$": "$.DatabaseName",
        "jdbcOptions.$": "$.jdbcOptions",
        "MasterArn.$": "$.check-status-rename-cluster-result.DbClusters[0].MasterUserSecret.SecretArn",
        "DbClusterIdentifier.$": "$.DbClusterIdentifier",
        "RotationLambdaARN.$": "$.RotationLambdaARN"
      },
      "ResultPath": "$.map-database-users-result"
    },
    "update-dynamodb": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName.$": "$.DynamoDBTableName",
        "Item": {
          "appname": {
            "S.$": "$.TagApplication"
          },
          "environment": {
            "S.$": "$.TagEnvironment"
          },
          "dbinstance": {
            "S.$": "$.DbClusterIdentifier"
          },
          "source": {
            "S.$": "$.SourceDBClusterIdentifier"
          },
          "restoretype": {
            "S.$": "$.RestoreType"
          },
          "snapshot": {
            "S": "null"
          },
          "status": {
            "S": "completed"
          },
          "restoredate": {
            "S": "$$.State.StartTime"
          },
          "restoretime": {
            "S": "$$.State.EnteredTime"
          }
        }
      },
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.update-dynamodb-result",
      "Next": "send-msg"
    },
    "send-msg": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn.$": "$.SNSTopicArn",
        "Subject.$": "$.SNSSubject",
        "Message.$": "$.SNSMessage"
      },
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.sendmsg-result",
      "Next": "RESTORE-COMPLETE"
    },
    "RESTORE-COMPLETE": {
      "Type": "Pass",
      "End": true
    },
    "update-dynamodb-failure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "TableName.$": "$.DynamoDBTableName",
        "Item": {
          "appname": {
            "S.$": "$.TagApplication"
          },
          "environment": {
            "S.$": "$.TagEnvironment"
          },
          "dbinstance": {
            "S.$": "$.DbClusterIdentifier"
          },
          "source": {
            "S.$": "$.SourceDBClusterIdentifier"
          },
          "restoretype": {
            "S.$": "$.RestoreType"
          },
          "snapshot": {
            "S": "null"
          },
          "status": {
            "S": "failed"
          },
          "restoredate": {
            "S": "$$.State.StartTime"
          },
          "restoretime": {
            "S": "$$.State.EnteredTime"
          }
        }
      },
      "ResultPath": "$.update-dynamodb-failure-result",
      "Next": "send-msg-failure"
    },
    "send-msg-failure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "TopicArn.$": "$.SNSTopicArn",
        "Subject.$": "$.SNSSubjectFailure",
        "Message.$": "$.SNSMessageFailure"
      },
      "ResultPath": "$.sendmsg-result",
      "Next": "RESTORE-FAILED"
    },
    "RESTORE-FAILED": {
      "Type": "Fail",
      "Error": "Restore failed",
      "Cause": "One of the states failed. Please check the logs"
    }
  }
}